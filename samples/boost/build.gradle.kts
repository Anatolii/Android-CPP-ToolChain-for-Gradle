plugins {
    id("dev.anatolii.internal.boost")
}
tasks.register("assembleAllCompatibleModules") {
    group = "${project.name} build"
    dependsOn(
        ":boost:multi_array:assemble",
        ":boost:smart_ptr:assemble",
        ":boost:parameter:assemble",
        ":boost:algorithm:assemble",
        ":boost:any:assemble",
        ":boost:concept_check:assemble",
        ":boost:tti:assemble",
        ":boost:functional:assemble",
        ":boost:config:assemble",
        ":boost:interprocess:assemble",
        ":boost:foreach:assemble",
        ":boost:spirit:assemble",
        ":boost:io:assemble",
        ":boost:units:assemble",
        ":boost:preprocessor:assemble",
        ":boost:format:assemble",
        ":boost:xpressive:assemble",
        ":boost:integer:assemble",
        ":boost:tokenizer:assemble",
        ":boost:inspect:assemble",
        ":boost:boostbook:assemble",
        ":boost:crc:assemble",
        ":boost:logic:assemble",
        ":boost:numeric_conversion:assemble",
        ":boost:lambda:assemble",
        ":boost:mpl:assemble",
        ":boost:typeof:assemble",
        ":boost:tuple:assemble",
        ":boost:utility:assemble",
        ":boost:dynamic_bitset:assemble",
        ":boost:assign:assemble",
        ":boost:function:assemble",
        ":boost:conversion:assemble",
        ":boost:optional:assemble",
        ":boost:property_tree:assemble",
        ":boost:bimap:assemble",
        ":boost:variant:assemble",
        ":boost:array:assemble",
        ":boost:multi_index:assemble",
        ":boost:bcp:assemble",
        ":boost:ptr_container:assemble",
        ":boost:statechart:assemble",
        ":boost:static_assert:assemble",
        ":boost:range:assemble",
        ":boost:rational:assemble",
        ":boost:iterator:assemble",
        ":boost:property_map:assemble",
        ":boost:detail:assemble",
        ":boost:interval:assemble",
        ":boost:ublas:assemble",
        ":boost:type_traits:assemble",
        ":boost:compatibility:assemble",
        ":boost:bind:assemble",
        ":boost:pool:assemble",
        ":boost:proto:assemble",
        ":boost:fusion:assemble",
        ":boost:function_types:assemble",
        ":boost:intrusive:assemble",
        ":boost:asio:assemble",
        ":boost:uuid:assemble",
        ":boost:litre:assemble",
        ":boost:circular_buffer:assemble",
        ":boost:unordered:assemble",
        ":boost:signals2:assemble",
        ":boost:accumulators:assemble",
        ":boost:scope_exit:assemble",
        ":boost:flyweight:assemble",
        ":boost:icl:assemble",
        ":boost:predef:assemble",
        ":boost:polygon:assemble",
        ":boost:msm:assemble",
        ":boost:heap:assemble",
        ":boost:coroutine2:assemble",
        ":boost:ratio:assemble",
        ":boost:odeint:assemble",
        ":boost:geometry:assemble",
        ":boost:phoenix:assemble",
        ":boost:move:assemble",
        ":boost:local_function:assemble",
        ":boost:multiprecision:assemble",
        ":boost:lockfree:assemble",
        ":boost:assert:assemble",
        ":boost:align:assemble",
        ":boost:type_index:assemble",
        ":boost:core:assemble",
        ":boost:throw_exception:assemble",
        ":boost:winapi:assemble",
        ":boost:sort:assemble",
        ":boost:convert:assemble",
        ":boost:endian:assemble",
        ":boost:vmd:assemble",
        ":boost:dll:assemble",
        ":boost:compute:assemble",
        ":boost:hana:assemble",
        ":boost:metaparse:assemble",
        ":boost:qvm:assemble",
        ":boost:process:assemble",
        ":boost:poly_collection:assemble",
        ":boost:beast:assemble",
        ":boost:mp11:assemble",
        ":boost:callable_traits:assemble",
        ":boost:contract:assemble",
        ":boost:check_build:assemble",
        ":boost:container_hash:assemble",
        ":boost:hof:assemble",
        ":boost:yap:assemble",
        ":boost:safe_numerics:assemble",
        ":boost:parameter_python:assemble",
        ":boost:headers:assemble",
        ":boost:boost_install:assemble",
        ":boost:histogram:assemble",
        ":boost:variant2:assemble",
        ":boost:nowide:assemble",
        ":boost:docca:assemble",
        ":boost:cmake:assemble",
        ":boost:static_string:assemble",
        ":boost:stl_interfaces:assemble",
        ":boost:more:assemble",
        ":boost:leaf:assemble",
        ":boost:pfr:assemble"
    )
}


tasks.register("assembleAllQuarantinedModules") {
    group = "${project.name} build"
    dependsOn(
        ":boost:system:assemble",
        ":boost:math:assemble",
        ":boost:python:assemble",
        ":boost:log:assemble",
        ":boost:exception:assemble",
        ":boost:thread:assemble",
        ":boost:timer:assemble",
        ":boost:regex:assemble",
        ":boost:random:assemble",
        ":boost:serialization:assemble",
        ":boost:test:assemble",
        ":boost:date_time:assemble",
        ":boost:graph:assemble",
        ":boost:filesystem:assemble",
        ":boost:iostreams:assemble",
        ":boost:build:assemble",
        ":boost:quickbook:assemble",
        ":boost:graph_parallel:assemble",
        ":boost:program_options:assemble",
        ":boost:wave:assemble",
        ":boost:gil:assemble",
        ":boost:mpi:assemble",
        ":boost:atomic:assemble",
        ":boost:chrono:assemble",
        ":boost:coroutine:assemble",
        ":boost:locale:assemble",
        ":boost:auto_index:assemble",
        ":boost:container:assemble",
        ":boost:context:assemble",
        ":boost:type_erasure:assemble",
        ":boost:boostdep:assemble",
        ":boost:lexical_cast:assemble",
        ":boost:fiber:assemble",
        ":boost:stacktrace:assemble",
        ":boost:outcome:assemble",
        ":boost:json:assemble"
    )
}